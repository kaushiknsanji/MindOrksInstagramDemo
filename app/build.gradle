plugins {
    id 'com.android.application'
    // Targeting Android Platform of Kotlin
    id 'kotlin-android'
    // Annotation processing tool for Kotlin
    id 'kotlin-kapt'
}

// Load the API Properties
def apiPropertiesFile = rootProject.file("instagram_api.properties")
def apiProperties = new Properties()
apiProperties.load(new FileInputStream(apiPropertiesFile))

kapt {
    arguments {
        // Enable incremental annotation processing for Room
        arg("room.incremental", "true")
    }
}

android {
    // Constants defined for use with buildConfigField
    def STRING = "String"
    def BASE_URL = "BASE_URL"
    def BASE_URL_VAL = '"' + apiProperties['BASE_URL_VAL'] + '"'
    def API_KEY = "API_KEY"
    def API_KEY_VAL = '"' + apiProperties['API_KEY_VAL'] + '"'

    compileSdkVersion versions.compile_sdk

    defaultConfig {
        applicationId "com.mindorks.kaushiknsanji.instagram.demo"
        minSdkVersion versions.min_sdk
        targetSdkVersion versions.target_sdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    sourceSets {
        // Shared Test directory for classes shared between Instrumented Tests and Unit Tests
        def sharedTestDir = 'src/sharedTest/java'

        test {
            // Add shared test directory to source of Unit Tests
            java.srcDirs += sharedTestDir
        }

        androidTest {
            // Add shared test directory to source of Instrumented Tests
            java.srcDirs += sharedTestDir
        }
    }

    buildTypes {
        debug {
            buildConfigField STRING, BASE_URL, BASE_URL_VAL
            buildConfigField STRING, API_KEY, API_KEY_VAL
        }
        release {
            minifyEnabled true // to apply the proguard
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField STRING, BASE_URL, BASE_URL_VAL
            buildConfigField STRING, API_KEY, API_KEY_VAL
        }
    }

    buildFeatures {
        viewBinding true
    }

    // Target Java8
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    // Target Java8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    // JARs
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Android Support library
    implementation "androidx.appcompat:appcompat:$versions.appcompat"

    // Core KTX
    implementation "androidx.core:core-ktx:$versions.core"

    // Activity
    implementation "androidx.activity:activity-ktx:$versions.activity"

    // Fragment
    implementation "androidx.fragment:fragment-ktx:$versions.fragment"

    // Multidex
    implementation "androidx.multidex:multidex:$versions.multidex"

    // Constraint Layout library
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintlayout"

    // Material Design
    implementation "com.google.android.material:material:$versions.material"

    // RecyclerView
    implementation "androidx.recyclerview:recyclerview:$versions.recyclerview"

    // CardView
    implementation "androidx.cardview:cardview:$versions.cardview"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"

    // Dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"

    // Database
    implementation "androidx.room:room-runtime:$versions.room"
    kapt "androidx.room:room-compiler:$versions.room"
    implementation "androidx.room:room-rxjava2:$versions.room"

    // Database Debugging
    debugImplementation "com.amitshekhar.android:debug-db:$versions.debug_db"

    // Image
    implementation "com.github.bumptech.glide:glide:$versions.glide"
    kapt "com.github.bumptech.glide:compiler:$versions.glide"
    implementation "com.github.bumptech.glide:okhttp3-integration:$versions.glide"

    // ParaCamera for capturing Images
    implementation "com.mindorks:paracamera:$versions.paracamera"

    // PhotoView for viewing Photos
    implementation "com.github.chrisbanes:PhotoView:$versions.photoview"

    // Networking
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"
    implementation "com.squareup.okhttp3:okhttp:$versions.okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"
    implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:$versions.retrofit_rxjava_adapter"

    // Reactive
    implementation "io.reactivex.rxjava2:rxjava:$versions.rxjava"
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rxandroid"

    // Logger
    implementation "com.jakewharton.timber:timber:$versions.timber"

    // JSON de/serializer using Gson
    implementation "com.google.code.gson:gson:$versions.gson"

    // Local Unit Tests
    testImplementation "junit:junit:$versions.junit"
    testImplementation "org.mockito:mockito-core:$versions.mockito"
    testImplementation "android.arch.core:core-testing:$versions.core_testing"
    testImplementation "org.hamcrest:hamcrest-library:$versions.hamcrest"
    kaptTest "com.google.dagger:dagger-compiler:$versions.dagger"

    // UI Tests
    androidTestImplementation "androidx.test:runner:$versions.test_runner"
    androidTestImplementation "androidx.test.ext:junit:$versions.test_ext_runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$versions.espresso"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$versions.espresso"
    androidTestImplementation "org.mockito:mockito-core:$versions.mockito"
    debugImplementation("androidx.fragment:fragment-testing:$versions.fragment_testing") {
        because 'debugImplementation is used here since the FragmentScenaro relies on an ' +
                'empty activity which is only accessible by the test target process'
    }
    kaptAndroidTest "com.google.dagger:dagger-compiler:$versions.dagger"
}
